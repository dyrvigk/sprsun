external_components:
  - source: github://dyrvigk/sprsun@main
    refresh: 0s



nilan:

 
globals:
  - id: number_compressor_starts
    type: int
    restore_value: yes
    initial_value: '0'
 
 
binary_sensor:
- platform: modbus_controller
  modbus_controller_id: sprsun_pc
  name: Grzałka CO
  id: grzalka_co
  #entity_category: diagnostic
  #device_class: heat
  register_type: holding
  address: 0x0005
  bitmask: 0x20
  on_press:
    if:
      condition:
        switch.is_on: blokada_grzalka_co
      then:
        - switch.turn_on: relay_grzalka_co
  on_release:
    if:
      condition:
        switch.is_on: blokada_grzalka_co
      then:
        - switch.turn_off: relay_grzalka_co 
 
- platform: modbus_controller
  modbus_controller_id: sprsun_pc
  name: Grzałka CWU
  id: grzalka_cwu
  #entity_category: diagnostic
  #device_class: heat
  register_type: holding
  address: 0x0005
  bitmask: 0x80
  on_press:
    if:
      condition:
        switch.is_on: blokada_grzalka_cwu
      then:
        - switch.turn_on: relay_grzalka_cwu
  on_release:
    if:
      condition:
        switch.is_on: blokada_grzalka_cwu
      then:
        - switch.turn_off: relay_grzalka_cwu 
 
- platform: modbus_controller
  modbus_controller_id: sprsun_pc
  name: Grzanie CWU
  id: hotwater_demand
  #entity_category: diagnostic
  #device_class: heat
  register_type: holding
  address: 0x0003
  bitmask: 0x01
 
- platform: modbus_controller
  modbus_controller_id: sprsun_pc
  name: Grzanie CO
  id: heating_demand
  #entity_category: diagnostic
  #device_class: heat
  register_type: holding
  address: 0x0003
  bitmask: 0x02
 
- platform: modbus_controller
  modbus_controller_id: sprsun_pc
  name: Praca sprężarki
  id: compressor_demand
  #entity_category: diagnostic
  #device_class: heat
  register_type: holding
  address: 0x0004
  bitmask: 0x01
  on_press:
    then:
      - lambda: 'id(number_compressor_starts)++;'
 
text_sensor:
  - platform: template
    id: pump1_status
    name: "Pompa CO status"
    icon: mdi:thermostat
 
  - platform: template
    name: ${friendly_name} Uptime 
    lambda: |-
      int seconds = (id(uptime_sec).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600); 
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
    icon: mdi:clock-start
    update_interval: 120s
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Switching input symbol
    id: switching_input_symbol
    register_type: holding
    address: 0x0002
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "A/C Linkage switch, ";
       if ((data[idx] & 0x0002) != 0) z += "Linkage switch, ";
       if ((data[idx] & 0x0004) != 0) z += "Heating linkage, ";
       if ((data[idx] & 0x0008) != 0) z += "Cooling linkage, ";
       if ((data[idx] & 0x0010) != 0) z += "Flow Switch, ";
       if ((data[idx] & 0x0020) != 0) z += "High pessure switch, ";
       if ((data[idx] & 0x0040) != 0) z += "Phase sequence detection, ";
       if ((data[idx] & 0x0080) != 0) z += "Invalid, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Working status mark
    id: working_status_mark
    register_type: holding
    address: 0x0003
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Hot water demand, ";
       if ((data[idx] & 0x0002) != 0) z += "Heating demand, ";
       if ((data[idx] & 0x0004) != 0) z += "With or without heating, ";
       if ((data[idx] & 0x0008) != 0) z += "With or without cooling, ";
       if ((data[idx] & 0x0010) != 0) z += "Antilegionella on, ";
       if ((data[idx] & 0x0020) != 0) z += "Cooling demand, ";
       if ((data[idx] & 0x0040) != 0) z += "Alarm downtime, ";
       if ((data[idx] & 0x0080) != 0) z += "Defrost, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Output symbol 1
    id: output_symbol_1
    register_type: holding
    address: 0x0004
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Compressor, ";
       if ((data[idx] & 0x0002) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0004) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0020) != 0) z += "Fan, ";
       if ((data[idx] & 0x0040) != 0) z += "4-way valve, ";
       if ((data[idx] & 0x0080) == 0) z += "Low fan speed, ";
       if ((data[idx] & 0x0080) == 128) z += "High fan speed, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
 
 
       
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Output symbol 2
    id: output_symbol_2
    register_type: holding
    address: 0x0005
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Chasis heater, ";
       if ((data[idx] & 0x0002) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0004) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0020) != 0) z += "Heating heater, ";
       if ((data[idx] & 0x0040) != 0) z += "Three-way valve, ";
       if ((data[idx] & 0x0080) != 0) z += "Hotwater heater, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Output symbol 3
    id: output_symbol_3
    register_type: holding
    address: 0x0006
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "A/C PUMP, ";
       if ((data[idx] & 0x0002) != 0) z += "Crank heater, ";
       if ((data[idx] & 0x0004) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0020) != 0) z += "Assistant solenoid valve, ";
       if ((data[idx] & 0x0040) != 0) z += "Pump, ";
       if ((data[idx] & 0x0080) != 0) z += "Invalid, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
       
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Failure symbol 1
    id: failure_symbol_1
    register_type: holding
    address: 0x0007
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Hotwater temp, ";
       if ((data[idx] & 0x0002) != 0) z += "Ambi temp, ";
       if ((data[idx] & 0x0004) != 0) z += "Coil temp, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Outlet temp, ";
       if ((data[idx] & 0x0020) != 0) z += "High pressure sensor failure, ";
       if ((data[idx] & 0x0040) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0080) != 0) z += "Phase sequence, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Failure symbol 2
    id: failure_symbol_2
    register_type: holding
    address: 0x0008
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Water flow failure, ";
       if ((data[idx] & 0x0002) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0004) != 0) z += "High protection of heating water outlet, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0020) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0040) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0080) != 0) z += "Invalid, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Failure symbol 3
    id: failure_symbol_3
    register_type: holding
    address: 0x0009
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0002) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0004) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0020) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0040) != 0) z += "Outlet gas temp failure, ";
       if ((data[idx] & 0x0080) != 0) z += "Invalid, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
       
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Failure symbol 4
    id: failure_symbol_4
    register_type: holding
    address: 0x000A
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Water inlet temp failure, ";
       if ((data[idx] & 0x0002) != 0) z += "Exhaust temperature is too high, ";
       if ((data[idx] & 0x0004) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0020) != 0) z += "Low protection of cooling water outlet, ";
       if ((data[idx] & 0x0040) != 0) z += "Inlet gas temp failure, ";
       if ((data[idx] & 0x0080) != 0) z += "Invalid, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
       
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Failure symbol 5
    id: failure_symbol_5
    register_type: holding
    address: 0x000B
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Low pressure protection, ";
       if ((data[idx] & 0x0002) != 0) z += "High pressure protection, ";
       if ((data[idx] & 0x0004) != 0) z += "Coil temperature is too high, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0020) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0040) != 0) z += "High pressure sensor failure, ";
       if ((data[idx] & 0x0080) != 0) z += "Low pressure sensor failure, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
 
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Failure symbol 6
    id: failure_symbol_6
    register_type: holding
    address: 0x000C
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0002) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0004) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Sec antifreeze, ";
       if ((data[idx] & 0x0020) != 0) z += "One antifreeze, ";
       if ((data[idx] & 0x0040) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0080) != 0) z += "Invalid, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Failure symbol 7
    id: failure_symbol_7
    register_type: holding
    address: 0x000D
    response_size: 2
    raw_encode: HEXBYTES
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 0x0001) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0002) != 0) z += "Ambient temperature is too low, ";
       if ((data[idx] & 0x0004) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0008) != 0) z += "Invalid, ";
       if ((data[idx] & 0x0010) != 0) z += "Frequency conversion module is faulty ";
       if ((data[idx] & 0x0020) != 0) z += "2# DC fan failure, ";
       if ((data[idx] & 0x0040) != 0) z += "1# DC fan failure, ";
       if ((data[idx] & 0x0080) != 0) z += "Invalid, ";
   
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};
 
 
climate:
  - platform: bang_bang
    name: "Termostat CO"
    id: termostat_co
    sensor: temp_co_dallas
    default_target_temperature_low: 30 °C
    default_target_temperature_high: 35 °C
    visual:
      min_temperature: 10
      max_temperature: 55
      temperature_step: 1.0
    heat_action:
      - switch.turn_on: relay_grzalka_co
    idle_action:
      - switch.turn_off: relay_grzalka_co
 
  - platform: bang_bang
    name: "Termostat CWU"
    id: termostat_cwu
    sensor: temp_cwu_dallas
    default_target_temperature_low: 50 °C
    default_target_temperature_high: 55 °C
    visual:
      min_temperature: 10
      max_temperature: 80
      temperature_step: 1.0
    heat_action:
      - switch.turn_on: relay_grzalka_cwu
    idle_action:
      - switch.turn_off: relay_grzalka_cwu
 
time:
  - platform: sntp
    id: my_time
############################################################
sensor:
  - name: "Liczba włączeń sprężarki" # From gloabl variable. To HA
    id: number_of_compressor_starts
    platform: template
    #unit_of_measurement: "litres"
    accuracy_decimals: 0
    lambda: 'return id(number_compressor_starts);'
    update_interval: 60s
 
 
############################################
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    id: parameter_marker_definition_raw
    register_type: holding
    address: 0x0032
    value_type: U_WORD
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    id: control_mark_1_raw
    register_type: holding
    address: 0x0033
    value_type: U_WORD
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    id: control_mark_2_raw
    register_type: holding
    address: 0x0034
    value_type: U_WORD
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    id: timeband_raw
    register_type: holding
    address: 0x0035
    value_type: U_WORD
 
#########################################################################
###########  Status pompy obiegowej
  - platform: duty_cycle
    pin:
      number: 33
      mode: INPUT_PULLUP
    id: pump1_power
    name: Pompa obiegowa CO pobór
    update_interval: 5s
    accuracy_decimals: 0
    device_class: "power"
    unit_of_measurement: 'W'
    filters:
      - lambda: |-
          return x == 100.0 ? 0.0 : x;
    on_value:
      - lambda: |-
          ESP_LOGD("pompa_co", "state=%f", id(pump1_power).state);
          if (id(pump1_power).state == 0) {
            id(pump1_status).publish_state("Wyłączona");
          }
          else if (id(pump1_power).state > 74 && id(pump1_power).state < 76) {
            id(pump1_status).publish_state("Ostrzeżenie");
          }
          else if (id(pump1_power).state > 84 && id(pump1_power).state < 86) {
            id(pump1_status).publish_state("Zatrzymanie alarmowe, awaria elektryczna");
          }
          else if (id(pump1_power).state > 89 && id(pump1_power).state < 91) {
            id(pump1_status).publish_state("Zatrzymanie alarmowe, blokada");
          }
          else if (id(pump1_power).state > 94 && id(pump1_power).state < 96) {
            id(pump1_status).publish_state("Tryb gotowości przez sygnał PWM (STOP)");
          }
          else if (id(pump1_power).state >= 100) {
            id(pump1_status).publish_state("Wyłączona");
            id(pump1_power).publish_state(0);
          }
 #         else {
 #           if (id(fan_pump1_state)) { id(pump1_status).publish_state("PWM"); }
 #           else { id(pump1_status).publish_state("Ręczny"); }
 #         }
 
 
##########################################################################
  - platform: duty_time
    name: "Czas pracy grzanie CO"
    id: work_time_heating
    sensor: heating_demand
    # ... EOR 'lambda'
   # lambda: "return id(my_climate).mode != CLIMATE_MODE_OFF;"
    # Restore (optional, default: False)
    restore: false
    last_time:
      name: Last time grzanie CO 
 
  - platform: duty_time
    name: "Czas pracy grzanie CWU"
    id: work_time_hot_water
    sensor: hotwater_demand
    # ... EOR 'lambda'
    #lambda: "return id(my_climate).mode != CLIMATE_MODE_OFF;"
    # Restore (optional, default: False)
    restore: false
    last_time:
      name: Last time grzanie CWU
 
  - platform: duty_time
    name: "Czas pracy sprężarki"
    id: work_time
    sensor: compressor_demand
    # ... EOR 'lambda'
    #lambda: "return id(my_climate).mode != CLIMATE_MODE_OFF;"
    # Restore (optional, default: False)
    restore: false
    last_time:
      name: Last time grzanie
 
 

 
############   PZEM-004T V3 grzałka CO

 
 
############   PZEM-004T V3 grzałka CWU

 
  - platform: pulse_meter
    pin: GPIO13
    id: flow_rate
    name: "Przepływomierz PC"
    unit_of_measurement: "L/hr"
    #icon: "${ha_icon}"
    timeout: 1s
    accuracy_decimals: 3
    filters:
      - lambda: return (x / 27.0) * 60.0; #F(Hz)=(0,45*Q)
    total:
      name: "Wodomierz PC"
      id: total_water_pc
      unit_of_measurement: "m³"
      device_class: water
      state_class: total_increasing
      accuracy_decimals: 3
      #icon: "${ha_icon}"
      filters:
        - lambda: return (x / 27000.0);
 
 
  
  - platform: uptime
    id: uptime_sec
 
#   - platform: modbus_controller
#     modbus_controller_id: sprsun_pc
#     name: ${friendly_name} Czas pracy
#     id: work_time
#     register_type: holding
#     address: 0x0001 
#     unit_of_measurement: "h"
#     #device_class: "temperature"
#     value_type: U_WORD
#     filters:
#       - lambda: return x * 1;
#     accuracy_decimals: 0
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Temperatura powrotu
    id: inlet_temp
    register_type: holding
    address: 0x000E 
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Temperatura CWU
    id: hotwater_temp
    register_type: holding
    address: 0x000F
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Temperatura zewnętrzna
    id: ambi_temp
    register_type: holding
    address: 0x0011
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.5;
    accuracy_decimals: 2
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Temperatura zasilania
    id: outlet_temp
    register_type: holding
    address: 0x0012
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2
 
  - platform: template
    name: ${friendly_name} delta woda
    id: delta
    icon: mdi:delta
    unit_of_measurement: "°C"
    device_class: "temperature"
    accuracy_decimals: 2
    update_interval: 5s
    lambda: |-
      return id(outlet_temp).state - id(inlet_temp).state;
 
  - platform: template
    name: ${friendly_name} moc cieplna 
    id: moc_cieplna
    unit_of_measurement: "W"
    device_class: "power"
    #icon: mdi:power
    accuracy_decimals: 2
    update_interval: 5s 
    lambda: |-
      return id(delta).state * id(flow_rate).state * 4.1899 * 975 / 3600;
   #przepływ: 1100-1440 
 
  - platform: template
    name: ${friendly_name} Współczynnik COP
    id: cop
    #unit_of_measurement: "W"
    #device_class: "power"
    #icon: mdi:power
    accuracy_decimals: 2
    update_interval: 5s  
    lambda: |-
      return id(moc_cieplna).state / id(pc_moc).state;
 
  - platform: template
    name: ${friendly_name} Współczynnik COP dla CO
    id: cop_co
    #unit_of_measurement: "W"
    #device_class: "power"
    #icon: mdi:power
    accuracy_decimals: 2
    update_interval: 5s  
    lambda: |-
      if ((id(heating_demand).state) and (id(pc_moc).state >= 200.00)) {
        return id(moc_cieplna).state / id(pc_moc).state;
      } else {
        return 0.00;
      }
 
  - platform: template
    name: ${friendly_name} Współczynnik COP dla CWU
    id: cop_cwu
    #unit_of_measurement: "W"
    #device_class: "power"
    #icon: mdi:power
    accuracy_decimals: 2
    update_interval: 5s  
    lambda: |-
      if ((id(hotwater_demand).state) and (id(pc_moc).state >= 200.00)) {
        return id(moc_cieplna).state / id(pc_moc).state;
      } else {
        return 0.00;
      }
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Temperatura gazu - wlot
    id: suct_gas_temp
    register_type: holding
    address: 0x0015
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.5;
    accuracy_decimals: 2
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Temperatura odparowania (Coil temp.)
    id: coil_temp
    register_type: holding
    address: 0x0016
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.5;
    accuracy_decimals: 2
    
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Pobór
    id: power_w
    register_type: holding
    address: 0x0017
    unit_of_measurement: "W"
    device_class: "power"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Temperatura gazu - wylot
    id: exhaust_temp
    register_type: holding
    address: 0x001B
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} EEV 1
    id: EEV_1_step
    register_type: holding
    address: 0x001C
    unit_of_measurement: "P"
    device_class: "temperature"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 0
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} EEV 2
    id: EEV_2_step
    register_type: holding
    address: 0x001D
    unit_of_measurement: "P"
    device_class: "temperature"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 0
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Kompresor freq
    id: comp_frequency
    register_type: holding
    address: 0x001E
    unit_of_measurement: "Hz"
    device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Frequency conversion failure 1
    id: freq_failure_1
    register_type: holding
    address: 0x001F
    #unit_of_measurement: "Hz"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Frequency conversion failure 2
    id: freq_failure_2
    register_type: holding
    address: 0x0020
    #unit_of_measurement: "Hz"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Napięcie szyny DC
    id: dc_bus_voltage
    register_type: holding
    address: 0x0021
    unit_of_measurement: "V"
    device_class: "voltage"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Driving temp.
    id: driving_temp
    register_type: holding
    address: 0x0022
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.5;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Prąd kompresora
    id: comp_current
    register_type: holding
    address: 0x0023
    unit_of_measurement: "A"
    device_class: "current"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Kompresor zadana
    id: comp_frequency_target
    register_type: holding
    address: 0x0024
    unit_of_measurement: "Hz"
    device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Wentylator 1
    id: dc_fan_1_speed
    register_type: holding
    address: 0x0026
    unit_of_measurement: "RPM"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Wentylator 2
    id: dc_fan_2_speed
    register_type: holding
    address: 0x0027
    unit_of_measurement: "RPM"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Temperatura odparowania
    id: evap_temp
    register_type: holding
    address: 0x0028
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Temperatura skraplacza
    id: cond_temp
    register_type: holding
    address: 0x0029
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Frequency conversion fault 8 bits higher
    id: freq_conv_fault_8_bits_higher
    register_type: holding
    address: 0x002A
    #unit_of_measurement: "Hz"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Frequency conversion fault 8 bits lower
    id: freq_conv_fault_8_bits_lower
    register_type: holding
    address: 0x002B
    #unit_of_measurement: "Hz"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Controller Version
    id: controller_version
    register_type: holding
    address: 0x002C
    #unit_of_measurement: "Hz"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 0
    skip_updates: 10
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Display Version
    id: display_version
    register_type: holding
    address: 0x002D
    #unit_of_measurement: "Hz"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 0
    skip_updates: 10
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Pompa obiegowa PWM
    id: dc_pump_speed
    register_type: holding
    address: 0x002E
    unit_of_measurement: "%"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 1
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Ciśnienie sprężania
    id: suct_press
    register_type: holding
    address: 0x002F
    unit_of_measurement: "bar"
    device_class: "pressure"
    value_type: U_WORD
    filters:
      - multiply: 0.01
    accuracy_decimals: 1
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Ciśnienie rozprężania
    id: disch_press
    register_type: holding
    address: 0x0030
    unit_of_measurement: "bar"
    device_class: "pressure"
    value_type: U_WORD
    filters:
      - multiply: 0.01
    accuracy_decimals: 1
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Wentylator zadana
    id: dc_fan_target
    register_type: holding
    address: 0x0031
    unit_of_measurement: "RPM"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 0
 
 
select:
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Tryb jednostki
    #icon: "mdi:fan"
    id: p06_unit_mode
    address: 0x0036
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 6
    optionsmap:
      "CWU": 0
      "Grzanie": 1
      "Chłodzenie": 2
      "Grzanie + CWU": 3
      "Chłodzenie + CWU": 4
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Tryb pompy obiegowej m/a
    #icon: "mdi:fan"
    id: f13_dc_pump_mode
    address:  0x0186
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 6
    optionsmap:
      "Manual": 0
      "Auto": 1
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Tryb kompresora
    #icon: "mdi:fan"
    id: f23_compressor_mode
    address:  0x0190
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 6
    optionsmap:
      "Dzienny": 0
      "ECO": 1
      "Nocny": 2
      "Testowy": 3
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Przełącznik grzanie/chłodzenie od temp zewnętrznej
    #icon: "mdi:fan"
    id: g09_enable_switch
    address:  0x0191
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 10
    optionsmap:
      "Wyłączony": 0
      "Włączony": 1
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Dzień sterylizacji legionella
    #icon: "mdi:fan"
    id: weekday_of_antilegionella
    address:  0x019B
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 10
    optionsmap:
      "Niedziela": 0
      "Poniedziałek": 1
      "Wtorek": 2
      "Środa": 3
      "Czwartek": 4
      "Piątek": 5
      "Sobota": 6
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Dzień przedziału czasowego nr 1
    #icon: "mdi:fan"
    id: week_set_of_timeband_1
    address:  0x01AD
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 10
    optionsmap:
      "Niedziela": 0
      "Poniedziałek": 1
      "Wtorek": 2
      "Środa": 3
      "Czwartek": 4
      "Piątek": 5
      "Sobota": 6
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Dzień przedziału czasowego nr 2
    #icon: "mdi:fan"
    id: week_set_of_timeband_2
    address:  0x01AE
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 10
    optionsmap:
      "Niedziela": 0
      "Poniedziałek": 1
      "Wtorek": 2
      "Środa": 3
      "Czwartek": 4
      "Piątek": 5
      "Sobota": 6
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Dzień przedziału czasowego nr 3
    #icon: "mdi:fan"
    id: week_set_of_timeband_3
    address:  0x01AF
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 10
    optionsmap:
      "Niedziela": 0
      "Poniedziałek": 1
      "Wtorek": 2
      "Środa": 3
      "Czwartek": 4
      "Piątek": 5
      "Sobota": 6
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Tryb pompy obiegowej
    #icon: "mdi:fan"
    id: g02_pump_work
    address:  0x019E
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 10
    optionsmap:
      "Interwał": 0
      "Ciągła": 1
      "Na żądanie": 2
 
#   - platform: modbus_controller
#     modbus_controller_id: sprsun_pc
#     name: ${friendly_name} F56 Model pompy ciepła
#     #icon: "mdi:fan"
#     id: f56_model_selection
#     address:  0x01BA
#     entity_category: config
#     value_type: U_WORD
#     optimistic: false
#     skip_updates: 10
#     optionsmap:
#       "A102508 - CGK025V3L-B 9.5 kW 220V": 1
#       "A202508 - CGK-025V3L-B 9.5 kW 380V": 2
#       "A103008 - CGK030V3L-B 12 kW 220V": 3
#       "A203008 - CGK-030V3L-B 12 kW 380V": 4
#       "A104008 - CGK040V3L-B 15 kW 220V": 5
#       "A204008 - CGK-040V3L-B 15 kW 380V": 6
#       "A105008 - CGK050V3L-B 20 kW 220V": 7
#       "A205008 - CGK-050V3L-B 20 kW 380V": 8
#       "A106008 - CGK060V3L-B 22 kW 220V": 9
#       "A206008 - CGK-060V3L-B 22 kW 380V": 10
 
#####################################   PARAMETER MARKER DEFINITION
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Heat pump on/off switch"
    id: on_off
    address: 0x0032
    value_type: U_WORD
    optionsmap:
      "OFF": 0
      "ON": 1
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0001));
      if ((x & 0x0001) == 0)
        return  std::string("OFF");
      if ((x & 0x0001) == 1)
        return  std::string("ON");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(parameter_marker_definition_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0001) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "MV mode 0-Auto, 1-Manual #(bit add: 0x321 - A45)"
    id: mv_mode
    address: 0x0032
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "AUTO": 0
      "MANUAL": 2
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0002));
      if ((x & 0x0002) == 0)
        return  std::string("AUTO");
      if ((x & 0x0002) == 2)
        return  std::string("MANUAL");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(parameter_marker_definition_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0002) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Manual frequency selection #(bit add: 0x322)"
    id: manual_frequency_selection
    address: 0x0032
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "OFF": 0
      "ON": 4
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0004));
      if ((x & 0x0004) == 0)
        return  std::string("OFF");
      if ((x & 0x0004) == 4)
        return  std::string("ON");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(parameter_marker_definition_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0004) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "AV Mode 0-Auto, 1-Manual #(bit add: 0x325 - B01)"
    id: av_mode
    address: 0x0032
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "AUTO": 0
      "MANUAL": 32
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0020));
      if ((x & 0x0020) == 0)
        return  std::string("AUTO");
      if ((x & 0x0020) == 32)
        return  std::string("MANUAL");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(parameter_marker_definition_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0020) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "AV init outlet setpoint #(bit add: 0x326 - B93)"
    id: av_init_outlet_stp
    address: 0x0032
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "OFF": 0
      "ON": 64
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0040));
      if ((x & 0x0040) == 0)
        return  std::string("OFF");
      if ((x & 0x0040) == 64)
        return  std::string("ON");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(parameter_marker_definition_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0040) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
############################################    CONTROL MARK 1
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Constant freq adj 0-NO, 1-YES #bit add: 0x0330 - R29"
    id: constant_freq_adj
    address: 0x0033
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "NO": 0
      "YES": 1
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0001));
      if ((x & 0x0001) == 0)
        return  std::string("NO");
      if ((x & 0x0001) == 1)
        return  std::string("YES");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_1_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0001) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Pressure switch enable 0-unuse, 1-use #bit add: 0x0331 - F01"
    id: pressure_switch_enable
    address: 0x0033
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "UNUSE": 0
      "USE": 2
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0002));
      if ((x & 0x0002) == 0)
        return  std::string("UNUSE");
      if ((x & 0x0002) == 2)
        return  std::string("USE");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_1_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0002) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "AV cool enable 0-use, 1-unuse #bit add: 0x0332 - B74"
    id: av_cool_enable
    address: 0x0033
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "UNUSE": 0
      "USE": 4
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0004));
      if ((x & 0x0004) == 0)
        return  std::string("UNUSE");
      if ((x & 0x0004) == 4)
        return  std::string("USE");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_1_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0004) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "AV control mode 0-enhan, 1-exhau #bit add: 0x0333 - B92"
    id: av_control_mode
    address: 0x0033
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "ENHAN": 0
      "EXHAU": 8
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0008));
      if ((x & 0x0008) == 0)
        return  std::string("ENHAN");
      if ((x & 0x0008) == 8)
        return  std::string("EXHAU");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_1_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0008) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "DC fan 1 enable 0-Unuse, 1-Use #bit add: 0x0334 - D01"
    id: dc_fan_1_enable
    address: 0x0033
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "UNUSE": 0
      "USE": 16
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0010));
      if ((x & 0x0010) == 0)
        return  std::string("UNUSE");
      if ((x & 0x0010) == 16)
        return  std::string("USE");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_1_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0010) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "DC fan 2 enable 0-Unuse, 1-Use #bit add: 0x0335 - D02"
    id: dc_fan_2_enable
    address: 0x0033
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "UNUSE": 0
      "USE": 32
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0020));
      if ((x & 0x0020) == 0)
        return  std::string("UNUSE");
      if ((x & 0x0020) == 32)
        return  std::string("USE");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_1_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0020) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Parameters reset 0-Unuse, 1-Use #bit add: 0x0336"
    id: parameters_reset
    address: 0x0033
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "UNUSE": 0
      "USE": 64
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0040));
      if ((x & 0x0040) == 0)
        return  std::string("UNUSE");
      if ((x & 0x0040) == 64)
        return  std::string("USE");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_1_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0040) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Failure reset 0-Unuse, 1-Use #bit add: 0x0337"
    id: failure_reset
    address: 0x0033
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "UNUSE": 0
      "USE": 128
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0080));
      if ((x & 0x0080) == 0)
        return  std::string("UNUSE");
      if ((x & 0x0080) == 128)
        return  std::string("USE");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_1_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0080) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
############################################     CONTROL MARK 2
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Antilegionella Enable 0-Unuse, 1-Use #bit add: 0x0340"
    id: antilegionella_enable
    address: 0x0034
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "UNUSE": 0
      "USE": 1
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0001));
      if ((x & 0x0001) == 0)
        return  std::string("UNUSE");
      if ((x & 0x0001) == 1)
        return  std::string("USE");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_2_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0001) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Two/Three function 0-Unuse, 1-Use #bit add: 0x0341"
    id: two_three_function
    address: 0x0034
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "UNUSE": 0
      "USE": 2
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0002));
      if ((x & 0x0002) == 0)
        return  std::string("UNUSE");
      if ((x & 0x0002) == 2)
        return  std::string("USE");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(control_mark_2_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0002) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
##################################################            TIMEBAND
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Timeband 1 Enable #bit add: 0x0350"
    id: timeband_1
    address: 0x0035
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "OFF": 0
      "ON": 1
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0001));
      if ((x & 0x0001) == 0)
        return  std::string("OFF");
      if ((x & 0x0001) == 1)
        return  std::string("ON");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(timeband_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0001) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Timeband 2 Enable #bit add: 0x0351"
    id: timeband_2
    address: 0x0035
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "OFF": 0
      "ON": 2
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0002));
      if ((x & 0x0002) == 0)
        return  std::string("OFF");
      if ((x & 0x0002) == 2)
        return  std::string("ON");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(timeband_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0002) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: sprsun_pc
    name: "Timeband 3 Enable #bit add: 0x0352"
    id: timeband_3
    address: 0x0035
    entity_category: config
    value_type: U_WORD
    optionsmap:
      "OFF": 0
      "ON": 4
    lambda: |-
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0004));
      if ((x & 0x0004) == 0)
        return  std::string("OFF");
      if ((x & 0x0004) == 4)
        return  std::string("ON");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(timeband_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      uint16_t modified = ((unmodified & ~0x0004) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
 
############################################################################
switch:
  - platform: gpio
    pin: 19
    id: relay_grzalka_co
    name: "Grzałka CO"
    icon: "mdi:heat"
 
  - platform: gpio
    pin: 21
    id: relay_grzalka_cwu
    name: "Grzałka CWU"
    icon: "mdi:heat"
 
  - platform: template
    name: "Sterowanie grzałki CO z PC"
    id: blokada_grzalka_co
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    turn_off_action:
        if:
          condition:
            binary_sensor.is_on: grzalka_co
          then:
            - switch.turn_off: relay_grzalka_co
    turn_on_action:
        if:
          condition:
            binary_sensor.is_on: grzalka_co
          then:
            - switch.turn_on: relay_grzalka_co
 
 
 
  - platform: template
    name: "Sterowanie grzałki CWU z PC"
    id: blokada_grzalka_cwu
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true    
    turn_off_action:
        if:
          condition:
            binary_sensor.is_on: grzalka_cwu
          then:
            - switch.turn_off: relay_grzalka_cwu
    turn_on_action:
        if:
          condition:
            binary_sensor.is_on: grzalka_cwu
          then:
            - switch.turn_on: relay_grzalka_cwu
 
   
number: 
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H01 Defrost freq
      address: 0x0037
      skip_updates: 10
      unit_of_measurement: "Hz"
      id: h01_defrost_freq
      value_type: U_WORD
      min_value: 30
      max_value: 120
      step: 1
      mode: box
      entity_category: config 
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H08 Defrost period 1
      address: 0x0038
      skip_updates: 10
      unit_of_measurement: "MIN"
      id: h08_defrost_period_1
      value_type: U_WORD
      min_value: 10
      max_value: 120
      step: 1
      mode: box
      entity_category: config  
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H11 Defrost period 2
      address: 0x0039
      skip_updates: 10      
      unit_of_measurement: "MIN"
      id: h11_defrost_period_1
      value_type: U_WORD
      min_value: 10
      max_value: 120
      step: 1
      mode: box
      entity_category: config  
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H11 Defrost period 3
      address: 0x003A
      skip_updates: 10      
      unit_of_measurement: "MIN"
      id: h14_defrost_period_3
      value_type: U_WORD
      min_value: 10
      max_value: 120
      step: 1
      mode: box
      entity_category: config  
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H15 Comp total run
      address: 0x003B
      skip_updates: 10      
      unit_of_measurement: "MIN"
      id: h15_comp_total_run
      value_type: U_WORD
      min_value: 1
      max_value: 60
      lambda: "return x / 5.0;"
      write_lambda: "return x * 5.0;"
      step: 1
      mode: box
      entity_category: config 
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H16 Comp continuous run
      address: 0x003C
      skip_updates: 10      
      unit_of_measurement: "MIN"
      id: h16_comp_continuous_run
      value_type: U_WORD
      min_value: 5
      max_value: 90
      #lambda: "return x / 5.0;"
      #write_lambda: "return x * 5.0;"
      step: 1
      mode: box
      entity_category: config 
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H05 Defrost time
      address: 0x003D
      skip_updates: 10      
      unit_of_measurement: "MIN"
      id: h05_defrost_time
      value_type: U_WORD
      min_value: 5
      max_value: 20
      #lambda: "return x / 5.0;"
      #write_lambda: "return x * 5.0;"
      step: 1
      mode: box
      entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A01 MV preiod
    #   address: 0x003E
    #   skip_updates: 10      
    #   unit_of_measurement: "S"
    #   id: a01_mv_preiod
    #   value_type: U_WORD
    #   min_value: 20
    #   max_value: 90
    #   #lambda: "return x / 5.0;"
    #   #write_lambda: "return x * 5.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A14 MV heat initial 0
    #   address: 0x003F
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a14_mv_heat_initial_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A15 MV heat initial 1
    #   address: 0x0040
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a15_mv_heat_initial_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A16 MV heat initial 2
    #   address: 0x0041
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a16_mv_heat_initial_2
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A17 MV heat initial 3
    #   address: 0x0042
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a17_mv_heat_initial_3
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A18 MV heat initial 4
    #   address: 0x0043
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a18_mv_heat_initial_4
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A19 MV heat initial 5
    #   address: 0x0044
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a19_mv_heat_initial_5
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A20 MV heat initial 6
    #   address: 0x0045
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a20_mv_heat_initial_6
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A21 MV heat initial 7
    #   address: 0x0046
    #   skip_updates: 10     
    #   #unit_of_measurement: "S"
    #   id: a21_mv_heat_initial_7
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A22 MV cool initial 0
    #   address: 0x0047
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a22_mv_cool_initial_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A23 MV cool initial 1
    #   address: 0x0048
    #   skip_updates: 10     
    #   #unit_of_measurement: "S"
    #   id: a23_mv_cool_initial_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A24 MV cool initial 2
    #   address: 0x0049
    #   skip_updates: 10
    #  #unit_of_measurement: "S"
    #   id: a24_mv_cool_initial_2
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A25 MV cool initial 3
    #   address: 0x004A
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a25_mv_cool_initial_3
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A26 MV water initial 0
    #   address: 0x004B
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a26_mv_water_initial_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A27 MV water initial 1
    #   address: 0x004C
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a27_mv_water_initial_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A28 MV water initial 2
    #   address: 0x004D
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a28_mv_water_initial_2
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A29 MV water initial 3
    #   address: 0x004E
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a29_mv_water_initial_3
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A30 MV water initial 4
    #   address: 0x004F
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a30_mv_water_initial_4
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A31 MV water initial 5
    #   address: 0x0050
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a31_mv_water_initial_5
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A32 MV water initial 6
    #   address: 0x0051
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a32_mv_water_initial_6
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A33 MV water initial 7
    #   address: 0x0052
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a33_mv_water_initial_7
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A34 MV heat lower 0
    #   address: 0x0053
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a34_mv_heat_lower_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A35 MV heat lower 1
    #   address: 0x0054
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a35_mv_heat_lower_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A34 MV heat lower 2
    #   address: 0x0055
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a34_mv_heat_lower_2
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A34 MV heat lower 3
    #   address: 0x0056
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a34_mv_heat_lower_3
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A34 MV heat lower 4
    #   address: 0x0057
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a34_mv_heat_lower_4
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A34 MV heat lower 5
    #   address: 0x0058
    #   skip_updates: 10     
    #   #unit_of_measurement: "S"
    #   id: a34_mv_heat_lower_5
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A34 MV heat lower 6
    #   address: 0x0059
    #   skip_updates: 10 
    #   #unit_of_measurement: "S"
    #   id: a34_mv_heat_lower_6
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A34 MV heat lower 7
    #   address: 0x005A
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: a34_mv_heat_lower_7
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A43 MV defrost open
    #   address: 0x005B
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: a43_mv_defrost_open
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A44 MV water lower
    #   address: 0x005C
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: a44_mv_water_lower
    #   value_type: U_WORD
    #   min_value: 25
    #   max_value: 75 
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A46 MV manual open
    #   address: 0x005D
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: a46_mv_manual_open
    #   value_type: U_WORD
    #   min_value: 10
    #   max_value: 225 
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A47 MV SH ratio
    #   address: 0x005E
    #   skip_updates: 10      
    #   #unit_of_measurement: "S"
    #   id: a47_mv_sh_ratio
    #   value_type: U_WORD
    #   min_value: 1
    #   max_value: 6
    #   #lambda: "return x / 2.0;"
    #   #write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A48 MV SH diff.
    #   address: 0x005F
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: a48_mv_sh_diff
    #   value_type: U_WORD
    #   min_value: 1
    #   max_value: 180
    #   #lambda: "return x / 2.0;"
    #   #write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A50 MV comp keep time
    #   address: 0x0060
    #   skip_updates: 10      
    #   unit_of_measurement: "S"
    #   id: a50_mv_comp_keep_time
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 250
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} A51 MV defrost keep time
    #   address: 0x0061
    #   skip_updates: 10       
    #   unit_of_measurement: "S"
    #   id: a51_mv_defrost_keep_time
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 250
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B02 AV manual open
    #   address: 0x0062
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b02_av_manual_open
    #   value_type: U_WORD
    #   min_value: 10
    #   max_value: 225
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B04 AV exhaust ratio
    #   address: 0x0063
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b04_av_exhaust_ratio
    #   value_type: U_WORD
    #   min_value: 1
    #   max_value: 6
    #   #lambda: "return x / 2.0;"
    #   #write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   skip_updates: 10       
    #   name: ${friendly_name} B05 AV exhaust diff
    #   address: 0x0064
    #   #unit_of_measurement: "S"
    #   id: b05_av_exhaust_diff
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 180
    #   #lambda: "return x / 2.0;"
    #   #write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B06 AV SH ratio
    #   address: 0x0065
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b06_av_sh_ratio
    #   value_type: U_WORD
    #   min_value: 1
    #   max_value: 6
    #   #lambda: "return x / 2.0;"
    #   #write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B07 AV SH diff
    #   address: 0x0066
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b07_av_sh_diff
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 180
    #   #lambda: "return x / 2.0;"
    #   #write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B08 AV period
    #   address: 0x0067
    #   skip_updates: 10       
    #   unit_of_measurement: "S"
    #   id: b08_av_period
    #   value_type: U_WORD
    #   min_value: 10
    #   max_value: 20
    #   #lambda: "return x / 2.0;"
    #   #write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B19 AV heat initial 0 (Outlet temp <= B93)
    #   address: 0x0068
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b19_av_heat_initial_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B20 AV heat initial 1
    #   address: 0x0069
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b20_av_heat_initial_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B27 AV water initial 0 (Outlet temp<=B93)
    #   address: 0x0070
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b27_av_water_initial_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B28 AV water initial 1
    #   address: 0x0071
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b28_water_initial_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B35 AV heat lower 0
    #   address: 0x0078
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b35_av_heat_lower_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B36 AV heat lower 1
    #   address: 0x0079
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b36_av_heat_lower_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B37 AV heat lower 2
    #   address: 0x007A
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b37_av_heat_lower_2
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B38 AV heat lower 3
    #   address: 0x007B
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b38_av_heat_lower_3
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B39 AV heat lower 4
    #   address: 0x007C
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b39_av_heat_lower_4
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B40 AV heat lower 5
    #   address: 0x007D
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b40_av_heat_lower_5
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B41 AV heat lower 6
    #   address: 0x007E
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b41_av_heat_lower_6
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B42 AV heat lower 7
    #   address: 0x007F
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b42_av_heat_lower_7
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B43 AV defrost open
    #   address: 0x0080
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b43_av_defrost_open
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B44 AV cool open
    #   address: 0x0081
    #   skip_updates: 10       
    #   #unit_of_measurement: "S"
    #   id: b44_av_cool_open
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F02 HP protect value
    #   address: 0x0082
    #   skip_updates: 10       
    #   unit_of_measurement: "bar"
    #   id: f02_hp_protect_value
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 250
    #   lambda: "return (x + 250) * 0.1;"
    #   write_lambda: "return (x - 250) / 0.1;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F03 HP recover value
    #   address: 0x0083
    #   skip_updates: 10      
    #   unit_of_measurement: "bar"
    #   id: f03_hp_recover_value
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 250
    #   lambda: "return (x + 250) * 0.1;"
    #   write_lambda: "return (x - 250) / 0.1;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F04 LP protect value
    #   address: 0x0084
    #   skip_updates: 10       
    #   unit_of_measurement: "bar"
    #   id: f04_lp_protect_value
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 200
    #   lambda: "return x * 0.1;"
    #   write_lambda: "return x / 0.1;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F05 LP recover value
    #   address: 0x0085
    #   skip_updates: 10       
    #   unit_of_measurement: "bar"
    #   id: f05_lp_recover_value
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 200
    #   lambda: "return x * 0.1;"
    #   write_lambda: "return x / 0.1;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D03 Cool dcfan max speed
    #   address: 0x0086
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d03_cool_dcfan_max_speed
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D04 Cool dcfan min speed
    #   address: 0x0087
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d04_cool_dcfan_min_speed
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D05 Cool dcfan high press
    #   address: 0x0088
    #   skip_updates: 10       
    #   #Sunit_of_measurement: "bar"
    #   icon: "mdi:fan-speed-1"
    #   id: d05_cool_dcfan_high_press
    #   value_type: U_WORD
    #   min_value: 10
    #   max_value: 40
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D06 Cool dcfan open diff
    #   address: 0x0089
    #   skip_updates: 10       
    #   unit_of_measurement: "bar"
    #   icon: "mdi:fan-speed-1"
    #   id: d06_cool_dcfan_open_diff
    #   value_type: U_WORD
    #   min_value: 2
    #   max_value: 10
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D07 Cool dcfan close diff
    #   address: 0x008A
    #   skip_updates: 10       
    #   unit_of_measurement: "bar"
    #   icon: "mdi:fan-speed-1"
    #   id: d07_cool_dcfan_close_diff
    #   value_type: U_WORD
    #   min_value: 2
    #   max_value: 10
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D08 Cool dcfan init speed
    #   address: 0x008B
    #   skip_updates: 10      
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d08_cool_dcfan_init_speed
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D09 Heat dcfan max speed
    #   address: 0x008C
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d09_heat_dcfan_max_speed
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D10 Heat dcfan min speed
    #   address: 0x008D
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d10_heat_dcfan_min_speed
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D11 Heat dcfan low press
    #   address: 0x008E
    #   skip_updates: 10      
    #   unit_of_measurement: "bar"
    #   icon: "mdi:fan-speed-1"
    #   id: d11_heat_dcfan_low_press
    #   value_type: U_WORD
    #   min_value: 5
    #   max_value: 15
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D12 Heat dcfan open diff
    #   address: 0x008F
    #   skip_updates: 10       
    #   unit_of_measurement: "bar"
    #   icon: "mdi:fan-speed-1"
    #   id: d12_heat_dcfan_open_diff
    #   value_type: U_WORD
    #   min_value: 2
    #   max_value: 10
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D13 Heat dcfan close diff
    #   address: 0x0090
    #   skip_updates: 10       
    #   unit_of_measurement: "bar"
    #   icon: "mdi:fan-speed-1"
    #   id: d13_heat_dcfan_close_diff
    #   value_type: U_WORD
    #   min_value: 2
    #   max_value: 10
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D14 Heat dcfan init speed
    #   address: 0x0091
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d14_heat_dcfan_init_speed
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D15 DCfan adjust period
    #   address: 0x0092
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d15_dcfan_adjust_period
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 30
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D16 DCfan adjust speed 1 (Speed difference >=200)
    #   address: 0x0093
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d16_dcfun_adjust_speed_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D17 DCfan adjust speed 2 (200>Speed difference>100)
    #   address: 0x0094
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d17_dcfun_adjust_speed_2
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D18 DCfan adjust speed 3 (100>Speed difference>50)
    #   address: 0x0095
    #   skip_updates: 10      
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d18_dcfun_adjust_speed_3
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D19 DCfan adjust speed 4 (50>Speed difference>20)
    #   address: 0x0096
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d19_dcfun_adjust_speed_4
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} D20 DCfan adjust speed 5 (20>Speed difference>5)
    #   address: 0x0097
    #   skip_updates: 10       
    #   unit_of_measurement: "RPM"
    #   icon: "mdi:fan-speed-1"
    #   id: d20_dcfun_adjust_speed_5
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B45 AV water lower 0
    #   address: 0x0098
    #   skip_updates: 10       
    #   #unit_of_measurement: "RPM"
    #   #icon: "mdi:fan-speed-1"
    #   id: b45_av_water_lower_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B46 AV water lower 1
    #   address: 0x0099
    #   skip_updates: 10       
    #   #unit_of_measurement: "RPM"
    #   #icon: "mdi:fan-speed-1"
    #   id: b46_av_water_lower_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B47 AV water lower 2
    #   address: 0x009A
    #   skip_updates: 10       
    #   #unit_of_measurement: "RPM"
    #   #icon: "mdi:fan-speed-1"
    #   id: b47_av_water_lower_2
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B48 AV water lower 3
    #   address: 0x009B
    #   skip_updates: 10       
    #   #unit_of_measurement: "RPM"
    #   #icon: "mdi:fan-speed-1"
    #   id: b48_av_water_lower_3
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B49 AV water lower 4
    #   address: 0x009C
    #   skip_updates: 10       
    #   #unit_of_measurement: "RPM"
    #   #icon: "mdi:fan-speed-1"
    #   id: b49_av_water_lower_4
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B50 AV water lower 5
    #   address: 0x009D
    #   skip_updates: 10       
    #   #unit_of_measurement: "RPM"
    #   #icon: "mdi:fan-speed-1"
    #   id: b50_av_water_lower_5
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B51 AV water lower 6
    #   address: 0x009E
    #   skip_updates: 10       
    #   #unit_of_measurement: "RPM"
    #   #icon: "mdi:fan-speed-1"
    #   id: b51_av_water_lower_6
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B52 AV water lower 7
    #   address: 0x009F
    #   skip_updates: 10       
    #   #unit_of_measurement: "RPM"
    #   #icon: "mdi:fan-speed-1"
    #   id: b52_av_water_lower_7
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 240
    #   lambda: "return x / 2.0;"
    #   write_lambda: "return x * 2.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B53 AV heat exhaust 0 (T >= 14 *C)
    #   address: 0x00A0
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b53_av_heat_exhaust_0
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B54 AV heat exhaust 1 [9, 14 *C)
    #   address: 0x00A1
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b54_av_heat_exhaust_1
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B55 AV heat exhaust 2 [4, 9 *C)
    #   address: 0x00A2
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b55_av_heat_exhaust_2
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B56 AV heat exhaust 3 [-5, 4 *C)
    #   address: 0x00A3
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b56_av_heat_exhaust_3
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B57 AV heat exhaust 4 [-10, -5 *C)
    #   address: 0x00A4
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b57_av_heat_exhaust_4
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B58 AV heat exhaust 5 [-16, -10 *C)
    #   address: 0x00A5
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b58_av_heat_exhaust_5
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B59 AV heat exhaust 6 [-23, -16 *C)
    #   address: 0x00A6
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b59_av_heat_exhaust_6
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B60 AV heat exhaust 7 (T < -23 *C)
    #   address: 0x00A7
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b60_av_heat_exhaust_7
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B61 AV water exhaust 0 (T >= 14 *C)
    #   address: 0x00A8
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b61_av_water_exhaust_0
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B62 AV water exhaust 1 [9, 14 *C)
    #   address: 0x00A9
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b62_av_water_exhaust_1
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B63 AV water exhaust 2 [4, 9 *C)
    #   address: 0x00AA
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b62_av_water_exhaust_2
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B64 AV water exhaust 3 [-5, 4 *C)
    #   address: 0x00AB
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b64_av_water_exhaust_3
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B65 AV water exhaust 4 [-10, -5 *C)
    #   address: 0x00AC
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b65_av_water_exhaust_4
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B66 AV water exhaust 5 [-16, -10 *C)
    #   address: 0x00AD
    #   skip_updates: 10       
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b66_av_water_exhaust_5
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B67 AV water exhaust 6 [-23, -16 *C)
    #   address: 0x00AE  
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b67_av_water_exhaust_6
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10 
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B68 AV water exhaust 7 (T < -23 *C)
    #   address: 0x00AF
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b68_av_water_exhaust_7
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B69 AV cool exhaust 0 (T >= 38 *C)
    #   address: 0x00B0
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b69_av_cool_exhaust_0
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B70 AV cool exhaust 1 [30, 38 *C)
    #   address: 0x00B1
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b70_av_cool_exhaust_1
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B71 AV cool exhaust 2 [25, 30 *C)
    #   address: 0x00B2
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b71_av_cool_exhaust_2
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B72 AV cool exhaust 3 (T < 25 *C)
    #   address: 0x00B3
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b72_av_cool_exhaust_3
    #   value_type: U_WORD
    #   min_value: 50
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config 
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B73 AV open delay
    #   address: 0x00B4
    #   unit_of_measurement: "S"
    #   #icon: "mdi:fan-speed-1"
    #   id: b74_av_open_delay
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 180
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B75 AV off exh diff
    #   address: 0x00B5
    #   #unit_of_measurement: "S"
    #   #icon: "mdi:fan-speed-1"
    #   id: b75_av_off_exh_diff
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 30
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B76 AV heat exh diff 0  (T >= 14 *C)
    #   address: 0x00B6
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b76_av_heat_exh_diff_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B77 AV heat exh diff 1 [9, 14 *C)
    #   address: 0x00B7
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b77_av_heat_exh_diff_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B78 AV heat exh diff 2 [4, 9 *C)
    #   address: 0x00B8
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b78_av_heat_exh_diff_2
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B79 AV heat exh diff 3 [-5, 4 *C)
    #   address: 0x00B9
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b79_av_heat_exh_diff_3
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B80 AV heat exh diff 4 [-10, -5 *C)
    #   address: 0x00BA
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b80_av_heat_exh_diff_4
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B81 AV heat exh diff 5 [-16, -10 *C)
    #   address: 0x00BB
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b81_av_heat_exh_diff_5
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B82 AV heat exh diff 6 [-23, -16 *C)
    #   address: 0x00BC
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b82_av_heat_exh_diff_6
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B83 AV heat exh diff 7 (T < -23 *C)
    #   address: 0x00BD
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b83_av_heat_exh_diff_7
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B84 AV water exh diff 0  (T >= 14 *C)
    #   address: 0x00BE
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b84_av_water_exh_diff_0
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B85 AV water exh diff 1 [9, 14 *C)
    #   address: 0x00BF
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b85_av_water_exh_diff_1
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B86 AV water exh diff 2 [4, 9 *C)
    #   address: 0x00C0
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b86_av_water_exh_diff_2
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B87 AV water exh diff 3 [-5, 4 *C)
    #   address: 0x00C1
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b87_av_water_exh_diff_3
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B88 AV water exh diff 4 [-10, -5 *C)
    #   address: 0x00C2
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b88_av_water_exh_diff_4
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B89 AV water exh diff 5 [-16, -10 *C)
    #   address: 0x00C3
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b89_av_water_exh_diff_5
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B90 AV water exh diff 6 [-23, -16 *C)
    #   address: 0x00C4
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b90_av_water_exh_diff_6
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B91 AV water exh diff 7 (T < -23 *C)
    #   address: 0x00C5
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b91_av_water_exh_diff_7
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 125
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
#########################################################
###   STOP DELTA TEMP GRZANIE: 4, DELTA TEMP GRZANIE (HISTEREZA): 5 (CZASAMI 6-7)
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} P03 Histereza CO
      address: 0x00C6
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: p03_temp_diff_co
      value_type: U_WORD
      min_value: 2
      max_value: 18
      #lambda: "return x / 10.0;"
      #write_lambda: "return x * 10.0;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F39 Stop delta temp grzanie CO
      address: 0x00C7
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f39_ac_constant_temp_diff
      value_type: U_WORD
      min_value: 1
      max_value: 10
      #lambda: "return x / 10.0;"
      #write_lambda: "return x * 10.0;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} P05 Histereza CWU
      address: 0x00C8
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: p05_temp_diff_cwu
      value_type: U_WORD
      min_value: 2
      max_value: 18
      #lambda: "return x / 10.0;"
      #write_lambda: "return x * 10.0;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F40 Stop delta temp grzanie CWU
      address: 0x00C9
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f40_wt_constant_temp_diff
      value_type: U_WORD
      min_value: 1
      max_value: 10
      #lambda: "return x / 10.0;"
      #write_lambda: "return x * 10.0;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} P04 Nastawa CWU
      address: 0x00CA
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: p04_hotwater_setpoint
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 6
      #（Read only lower 8 bits）
      bitmask: 0x00FF 
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} P02 Nastawa chłodzenie
      address: 0x00CB
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: p02_cooling_setpoint
      value_type: U_WORD
      min_value: 12
      max_value: 30
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 6
      #（Read only lower 8 bits）
      bitmask: 0x00FF 
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} P01 Nastawa CO
      address: 0x00CC
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: p01_heating_setpoint
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 6
      #（Read only lower 8 bits）
      bitmask: 0x00FF 
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F44 Water (CWU) temp calibration
      address: 0x00CD
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f44_wt_temp_calibration
      value_type: S_WORD
      min_value: -30
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F45 Inlet temp calibration
      address: 0x00CE
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f45_inlet_temp_calibration
      value_type: S_WORD
      min_value: -30
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F46 Outlet temp calibration
      address: 0x00CF
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f46_outlet_temp_calibration
      value_type: S_WORD
      min_value: -30
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F49 Water temp offset stp.
      address: 0x00D0
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f49_wt_temp_offset_stp
      value_type: U_WORD
      min_value: 30
      max_value: 55
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F50 Inlet temp offset stp.
      address: 0x00D1
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f50_inlet_temp_offset_stp
      value_type: U_WORD
      min_value: 30
      max_value: 55
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F42 Water temp offset
      address: 0x00D2
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f42_water_temp_offset
      value_type: U_WORD
      min_value: 0
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F43 inlet temp offset
      address: 0x00D3
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f43_inlet_temp_offset
      value_type: U_WORD
      min_value: 0
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H03 Defrost in stp.
      address: 0x00D4
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: h03_defrost_in_stp
      value_type: S_WORD
      min_value: -15
      max_value: -1
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H04 Defrost exit stp.
      address: 0x00D5
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: h04_defrost_exit_stp
      value_type: U_WORD
      min_value: 1
      max_value: 40
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H07 Def ambi coil 1
      address: 0x00D6
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: h07_def_ambi_coil_1
      value_type: U_WORD
      min_value: 0
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H10 Def ambi coil 2
      address: 0x00D7
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: h10_def_ambi_coil_2
      value_type: U_WORD
      min_value: 0
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H13 Def ambi coil 3
      address: 0x00D8
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: h13_def_ambi_coil_3
      value_type: U_WORD
      min_value: 0
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H09 Defrost ambient stp. 1
      address: 0x00D9
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: h09_defrost_ambi_stp_1
      value_type: S_WORD
      min_value: -30
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H12 Defrost ambient stp. 2
      address: 0x00DA
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: h12_defrost_ambi_stp_2
      value_type: S_WORD
      min_value: -30
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} H04 Defrost ambient stp. 3
      address: 0x00DB
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: h04_defrost_ambi_stp_3
      value_type: S_WORD
      min_value: -30
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A02 MV heating SH 1 (T => 14 °C)
      address: 0x00DC
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a02_mv_heating_sh_1
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A03 MV heating SH 2 [9, 14)
      address: 0x00DD
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a03_mv_heating_sh_2
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A04 MV heating SH 3 [4, 9)
      address: 0x00DE
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a04_mv_heating_sh_3
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A05 MV heating SH 4 [-5, 4)
      address: 0x00DF
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a05_mv_heating_sh_4
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A06 MV heating SH 5 [-10, -5)
      address: 0x00E0
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a06_mv_heating_sh_5
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A07 MV heating SH 6 [-16, -10)
      address: 0x00E1
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a07_mv_heating_sh_6
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A08 MV heating SH 7 [-23, -16)
      address: 0x00E2
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a08_mv_heating_sh_7
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A09 MV heating SH 8 (T < -23 °C)
      address: 0x00E3
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a00_mv_heating_sh_8
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A10 MV cooling SH 1 (T >=  38 °C)
      address: 0x00E4
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a10_mv_cooling_sh_1
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A11 MV cooling SH 2 [30, 38 °C)
      address: 0x00E5
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a11_mv_cooling_sh_2
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A12 MV cooling SH 3 [25, 30 °C)
      address: 0x00E6
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a12_mv_cooling_sh_3
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A13 MV cooling SH 4 (T < 25 °C)
      address: 0x00E7
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a13_mv_cooling_sh_4
      value_type: S_WORD
      min_value: -5
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} A42 MV exhaust stp.
      address: 0x00E8
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: a42_mv_exhaust_stp
      value_type: U_WORD
      min_value: 70
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B03 AV start ambient
      address: 0x00E9
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b03_av_start_ambi
      value_type: U_WORD
      min_value: 11
      max_value: 45
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B09 AV exhaust stp.
      address: 0x00EA
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b03_av_exhaust_ambi
      value_type: U_WORD
      min_value: 70
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B10 AV off exhaust stp.
      address: 0x00EB
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b10_av_off_exh_stp
      value_type: U_WORD
      min_value: 40
      max_value: 70
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B11 AV heating SH 1 (T >= 14 °C)
      address: 0x00EC
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b11_av_heating_sh_1
      value_type: S_WORD
      min_value: -10
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B12 AV heating SH 2 [9, 14 °C)
      address: 0x00ED
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b12_av_heating_sh_2
      value_type: S_WORD
      min_value: -10
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B13 AV heating SH 3 [4, 9 °C)
      address: 0x00EE
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b13_av_heating_sh_3
      value_type: S_WORD
      min_value: -10
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B14 AV heating SH 4 [-5, 4 °C)
      address: 0x00EF
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b14_av_heating_sh_4
      value_type: S_WORD
      min_value: -10
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B15 AV heating SH 5 [-10, -5 °C)
      address: 0x00F0
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b15_av_heating_sh_5
      value_type: S_WORD
      min_value: -10
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B16 AV heating SH 6 [-16, -10 °C)
      address: 0x00F1
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b16_av_heating_sh_6
      value_type: S_WORD
      min_value: -10
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B17 AV heating SH 7 [-23, -16 °C)
      address: 0x00F2
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b17_av_heating_sh_7
      value_type: S_WORD
      min_value: -10
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} B18 AV heating SH 8 (T < -23 °C)
      address: 0x00F3
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: b18_av_heating_sh_8
      value_type: S_WORD
      min_value: -10
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} D21 AC fan switch ambi. 1
      address: 0x00F4
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: d21_ac_fan_switch_ambi_1
      value_type: S_WORD
      min_value: -10
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} D22 AC fan switch ambi. 2
      address: 0x00F5
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: d22_ac_fan_switch_ambi_2
      value_type: S_WORD
      min_value: -10
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} R16 Exhaust high TP0
      address: 0x00F6
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: r16_exhaust_high_tp0
      value_type: U_WORD
      min_value: 50
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} R17 Exhaust high TP1
      address: 0x00F7
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: r17_exhaust_high_tp1
      value_type: U_WORD
      min_value: 50
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} R18 Exhaust high TP2
      address: 0x00F8
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: r18_exhaust_high_tp2
      value_type: U_WORD
      min_value: 50
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} R19 Exhaust high TP3
      address: 0x00F9
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: r19_exhaust_high_tp3
      value_type: U_WORD
      min_value: 50
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} R19 Exhaust high TP4
      address: 0x00FA
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: r20_exhaust_high_tp4
      value_type: U_WORD
      min_value: 50
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Manual frequency setting
      address: 0x00FB
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: manual_frequency_setting
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of water R00 (T >= 14 °C)
      address: 0x00FC
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_water_r00
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of water R01 [9, 14 °C)
      address: 0x00FD
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_water_r01
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of water R02 [4, 9 °C)
      address: 0x00FE
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_water_r02
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of water R03 [-5, 4 °C)
      address: 0x00FF
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_water_r03
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of water R30 [-10, -5 °C)
      address: 0x0100
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_water_r30
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of water R31 [-16, -10 °C)
      address: 0x0101
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_water_r31
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of water R32 [-23, -16 °C)
      address: 0x0102
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_water_r32
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of water R33 (T < -23 °C)
      address: 0x0103
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_water_r33
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#############
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of heat R04 (T >= 14 °C)
      address: 0x0104
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_heat_r04
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of heat R05 [9, 14 °C)
      address: 0x0105
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_heat_r05
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of heat R06 [4, 9 °C)
      address: 0x0106
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_heat_r06
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of heat R07 [-5, 4 °C)
      address: 0x0107
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_heat_r07
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of heat R08 [-10, -5 °C)
      address: 0x0108
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_heat_r08
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of heat R09 [-16, -10 °C)
      address: 0x0109
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_heat_r09
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of heat R10 [-23, -16 °C)
      address: 0x010A
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_heat_r10
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of heat R11 (T < -23 °C)
      address: 0x010B
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_heat_r11
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
####################
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of cool R12 (T >= 38 °C)
      address: 0x010C
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_cool_r12
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of cool R13 [30, 38 °C)
      address: 0x010D
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_cool_r13
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of cool R14 [25, 30 °C)
      address: 0x010E
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_cool_r14
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq of cool R15 (T < 25 °C)
      address: 0x010F
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_of_cool_r15
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
##################################################
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq adj lower limit R21
      address: 0x0110
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_adj_lower_limit_r21
      value_type: U_WORD
      min_value: 0
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq adj lower limit R22
      address: 0x0111
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_adj_lower_limit_r22
      value_type: U_WORD
      min_value: 0
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq adj lower limit R23
      address: 0x0112
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_adj_lower_limit_r23
      value_type: U_WORD
      min_value: 0
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq adj lower limit R24
      address: 0x0113
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_adj_lower_limit_r24
      value_type: U_WORD
      min_value: 0
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq adj upper limit R25
      address: 0x0114
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_adj_upper_limit_r25
      value_type: U_WORD
      min_value: 0
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq adj upper limit R26
      address: 0x0115
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_adj_upper_limit_r26
      value_type: U_WORD
      min_value: 0
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq adj upper limit R27
      address: 0x0116
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_adj_upper_limit_r27
      value_type: U_WORD
      min_value: 0
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Freq adj upper limit R28
      address: 0x0117
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: freq_adj_upper_limit_r28
      value_type: U_WORD
      min_value: 0
      max_value: 125
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
############################################
 
###Timeband 1 czas
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 1 ON hour
      address: 0x0119
      unit_of_measurement: "H"
      #icon: "mdi:fan-speed-1"
      id: timeband_1_on_hour
      value_type: U_WORD
      min_value: 0
      max_value: 23
      #lambda: "return x * 0.5;"S
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10      
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 1 ON minutes
      address: 0x011A
      unit_of_measurement: "M"
      #icon: "mdi:fan-speed-1"
      id: timeband_1_on_minutes
      value_type: U_WORD
      min_value: 0
      max_value: 59
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 1 OFF hour
      address: 0x011B
      unit_of_measurement: "H"
      #icon: "mdi:fan-speed-1"
      id: timeband_1_off_hour
      value_type: U_WORD
      min_value: 0
      max_value: 23
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 1 OFF minutes
      address: 0x011C
      unit_of_measurement: "M"
      #icon: "mdi:fan-speed-1"
      id: timeband_1_off_minutes
      value_type: U_WORD
      min_value: 0
      max_value: 59
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
 
###Timeband 2 czas 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 2 ON hour
      address: 0x011D
      unit_of_measurement: "H"
      #icon: "mdi:fan-speed-1"
      id: timeband_2_on_hour
      value_type: U_WORD
      min_value: 0
      max_value: 23
      #lambda: "return x * 0.5;"S
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 2 ON minutes
      address: 0x011E
      unit_of_measurement: "M"
      #icon: "mdi:fan-speed-1"
      id: timeband_2_on_minutes
      value_type: U_WORD
      min_value: 0
      max_value: 59
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 2 OFF hour
      address: 0x011F
      unit_of_measurement: "H"
      #icon: "mdi:fan-speed-1"
      id: timeband_2_off_hour
      value_type: U_WORD
      min_value: 0
      max_value: 23
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 2 OFF minutes
      address: 0x0120
      unit_of_measurement: "M"
      #icon: "mdi:fan-speed-1"
      id: timeband_2_off_minutes
      value_type: U_WORD
      min_value: 0
      max_value: 59
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
 
###Timeband 3 czas 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 3 ON hour
      address: 0x0121
      unit_of_measurement: "H"
      #icon: "mdi:fan-speed-1"
      id: timeband_3_on_hour
      value_type: U_WORD
      min_value: 0
      max_value: 23
      #lambda: "return x * 0.5;"S
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 3 ON minutes
      address: 0x0122
      unit_of_measurement: "M"
      #icon: "mdi:fan-speed-1"
      id: timeband_3_on_minutes
      value_type: U_WORD
      min_value: 0
      max_value: 59
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 3 OFF hour
      address: 0x0123
      unit_of_measurement: "H"
      #icon: "mdi:fan-speed-1"
      id: timeband_3_off_hour
      value_type: U_WORD
      min_value: 0
      max_value: 23
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Timeband 3 OFF minutes
      address: 0x0124
      unit_of_measurement: "M"
      #icon: "mdi:fan-speed-1"
      id: timeband_3_off_minutes
      value_type: U_WORD
      min_value: 0
      max_value: 59
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
     
#################################################################
 
#Częstotliwość w trybie ECO dla CWU
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of water R34
      address: 0x012D
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_water_r34
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of water R35
      address: 0x012E
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_water_r35
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of water R36
      address: 0x012F
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_water_r36
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of water R37
      address: 0x0130
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_water_r37
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of water R38
      address: 0x0131
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_water_r38
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of water R39
      address: 0x0132
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_water_r39
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of water R40
      address: 0x0133
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_water_r40
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of water R41
      address: 0x0134
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_water_r41
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Częstotliwość w trybie ECO dla CO
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of heat R42
      address: 0x0135
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_heat_r42
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of heat R43
      address: 0x0136
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_heat_r43
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of heat R44
      address: 0x0137
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_heat_r44
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of heat R45
      address: 0x0138
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_heat_r45
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of heat R46
      address: 0x0139
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_heat_r46
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of heat R47
      address: 0x013A
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_heat_r47
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of heat R48
      address: 0x013B
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_heat_r48
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of heat R49
      address: 0x013C
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_heat_r49
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
 
#################################################################
 
#Częstotliwość w trybie ECO dla chłodzenia
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of cool R50
      address: 0x013D
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_cool_r50
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of cool R51
      address: 0x013E
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_cool_r51
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of cool R52
      address: 0x013F
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_cool_r52
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} ECO freq of cool R53
      address: 0x0140
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: eco_freq_of_cool_r53
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Częstotliwość w trybie nocnym dla CWU
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of water R54
      address: 0x0141
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_water_r54
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of water R55
      address: 0x0142
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_water_r55
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of water R56
      address: 0x0143
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_water_r56
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of water R57
      address: 0x0144
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_water_r57
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of water R58
      address: 0x0145
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_water_r58
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of water R59
      address: 0x0146
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_water_r59
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of water R60
      address: 0x0147
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_water_r60
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of water R61
      address: 0x0148
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_water_r61
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Częstotliwość w trybie nocnym dla CO
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of heat R62
      address: 0x0149
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_heat_r62
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of heat R63
      address: 0x014A
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_heat_r63
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of heat R64
      address: 0x014B
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_heat_r64
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of heat R65
      address: 0x014C
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_heat_r65
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of heat R66
      address: 0x014D
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_heat_r66
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of heat R67
      address: 0x014E
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_heat_r67
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of heat R68
      address: 0x014F
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_heat_r68
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of heat R69
      address: 0x0150
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_heat_r69
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Częstotliwość w trybie nocnym dla chłodzenia
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of cool R70
      address: 0x0151
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_cool_r70
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of cool R71
      address: 0x0152
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_cool_r71
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of cool R72
      address: 0x0153
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_cool_r72
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Night freq of cool R73
      address: 0x0154
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: night_freq_of_cool_r73
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Częstotliwość w trybie testowym dla CWU
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of water R74
      address: 0x0155
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_water_r74
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of water R75
      address: 0x0156
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_water_r75
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of water R76
      address: 0x0157
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_water_r76
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of water R77
      address: 0x0158
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_water_r77
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of water R78
      address: 0x0159
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_water_r78
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of water R79
      address: 0x015A
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_water_r79
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of water R80
      address: 0x015B
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_water_r80
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of water R81
      address: 0x015C
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_water_r81
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Częstotliwość w trybie testowym dla CO
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of heat R82
      address: 0x015D
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_heat_r82
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of heat R83
      address: 0x015E
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_heat_r83
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of heat R84
      address: 0x015F
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_heat_r84
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of heat R85
      address: 0x0160
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_heat_r85
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of heat R86
      address: 0x0161
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_heat_r86
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of heat R87
      address: 0x0162
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_heat_r87
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of heat R88
      address: 0x0163
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_heat_r88
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Test freq of heat R89
      address: 0x0164
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: test_freq_of_heat_r89
      value_type: U_WORD
      min_value: 30
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Częstotliwość w trybie testowym dla chłodzenia
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} Test freq of cool R90
    #   address: 0x0165
    #   unit_of_measurement: "Hz"
    #   #icon: "mdi:fan-speed-1"
    #   id: test_freq_of_cool_r90
    #   value_type: U_WORD
    #   min_value: 30
    #   max_value: 120
    #   #lambda: "return x * 0.5;"
    #   #write_lambda: "return x / 0.5;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} Test freq of cool R91
    #   address: 0x0166
    #   unit_of_measurement: "Hz"
    #   #icon: "mdi:fan-speed-1"
    #   id: test_freq_of_cool_r91
    #   value_type: U_WORD
    #   min_value: 30
    #   max_value: 120
    #   #lambda: "return x * 0.5;"
    #   #write_lambda: "return x / 0.5;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} Test freq of cool R92
    #   address: 0x0167
    #   unit_of_measurement: "Hz"
    #   #icon: "mdi:fan-speed-1"
    #   id: test_freq_of_cool_r92
    #   value_type: U_WORD
    #   min_value: 30
    #   max_value: 120
    #   #lambda: "return x * 0.5;"
    #   #write_lambda: "return x / 0.5;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} Test freq of cool R93
    #   address: 0x0168
    #   unit_of_measurement: "Hz"
    #   #icon: "mdi:fan-speed-1"
    #   id: test_freq_of_cool_r93
    #   value_type: U_WORD
    #   min_value: 30
    #   max_value: 120
    #   #lambda: "return x * 0.5;"
    #   #write_lambda: "return x / 0.5;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
#################################################################
 
#Temperatura zewnętrzna w trybie ECO dla CO
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E01 Economic heat ambi 1
      address: 0x0169
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e01_economic_heat_ambi_1
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E02 Economic heat ambi 2
      address: 0x016A
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e02_economic_heat_ambi_2
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E03 Economic heat ambi 3
      address: 0x016B
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e03_economic_heat_ambi_3
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E04 Economic heat ambi 4
      address: 0x016C
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e04_economic_heat_ambi_4
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Temperatura zewnętrzna w trybie ECO dla CWU
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E05 Economic water ambi 1
      address: 0x016D
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e05_economic_water_ambi_1
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E06 Economic water ambi 2
      address: 0x016E
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e06_economic_water_ambi_2
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E07 Economic water ambi 3
      address: 0x016F
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e07_economic_water_ambi_3
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E08 Economic water ambi 4
      address: 0x0170
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e08_economic_water_ambi_4
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Temperatura zewnętrzna w trybie ECO dla chłodzenia
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E09 Economic cool ambi 1
      address: 0x0171
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e09_economic_cool_ambi_1
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E10 Economic cool ambi 2
      address: 0x0172
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e10_economic_cool_ambi_2
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E11 Economic cool ambi 3
      address: 0x0173
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e11_economic_cool_ambi_3
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E12 Economic cool ambi 4
      address: 0x0174
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e12_economic_cool_ambi_4
      value_type: S_WORD
      min_value: -30
      max_value: 50
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#################################################################
 
#Temperatura w trybie ECO dla CO
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E13 Economic heat temp 1
      address: 0x0175
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e13_economic_heat_temp_1
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF 
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E14 Economic heat temp 2
      address: 0x0176
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e14_economic_heat_temp_2
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E15 Economic heat temp 3
      address: 0x0177
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e15_economic_heat_temp_3
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E16 Economic heat temp 4
      address: 0x0178
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e16_economic_heat_temp_4
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
#################################################################
 
#Temperatura w trybie ECO dla CWU
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E17 Economic water temp 1
      address: 0x0179
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e17_economic_water_temp_1
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E18 Economic water temp 2
      address: 0x017A
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e18_economic_water_temp_2
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E19 Economic water temp 3
      address: 0x017B
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e19_economic_water_temp_3
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E20 Economic water temp 4
      address: 0x017C
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e20_economic_water_temp_4
      value_type: U_WORD
      min_value: 10
      max_value: 55
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
#################################################################
 
#Temperatura w trybie ECO dla chłodzenia
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E21 Economic cool temp 1
      address: 0x017D
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e21_economic_cool_temp_1
      value_type: U_WORD
      min_value: 12
      max_value: 30
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E22 Economic cool temp 2
      address: 0x017E
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e22_economic_cool_temp_2
      value_type: U_WORD
      min_value: 12
      max_value: 30
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E23 Economic cool temp 3
      address: 0x017F
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e23_economic_cool_temp_3
      value_type: U_WORD
      min_value: 12
      max_value: 30
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} E24 Economic cool temp 4
      address: 0x0180
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: e24_economic_cool_temp_4
      value_type: U_WORD
      min_value: 12
      max_value: 30
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
###########################################################################
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} G08 Delay nagrzewnicy CWU
      address: 0x0181
      unit_of_measurement: "min"
      #icon: "mdi:fan-speed-1"
      id: g08_comp_delay
      value_type: U_WORD
      min_value: 1
      max_value: 60
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} G06 Delay nagrzewnicy CO
      address: 0x0182
      unit_of_measurement: "min"
      #icon: "mdi:fan-speed-1"
      id: g06_comp_delay
      value_type: U_WORD
      min_value: 1
      max_value: 60
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} G07 temperatura zew włączenia grzałki CWU
      address: 0x0183
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: g07_hotwater_heater_ext
      value_type: S_WORD
      min_value: -30
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} G05 temperatura zew włączenia grzałki CO
      address: 0x0184
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: g05_heating_heater_ext
      value_type: S_WORD
      min_value: -30
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} G03 Czas pracy pompy obiegowej w trybie Interwał
      address: 0x0185
      unit_of_measurement: "min"
      #icon: "mdi:fan-speed-1"
      id: g03_start_internal
      value_type: U_WORD
      min_value: 1
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F14 DC pump cycle
      address: 0x0187
      unit_of_measurement: "s"
      #icon: "mdi:fan-speed-1"
      id: f14_dc_pump_cycle
      value_type: U_WORD
      min_value: 10
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F15 DC pump freq set
      address: 0x0188
      unit_of_measurement: "%"
      #icon: "mdi:fan-speed-1"
      id: f15_dc_pump_freq_set
      value_type: U_WORD
      min_value: 10
      max_value: 100
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F16 DC pump max freq
      address: 0x0189
      unit_of_measurement: "%"
      #icon: "mdi:fan-speed-1"
      id: f16_dc_pump_max_freq
      value_type: U_WORD
      min_value: 10
      max_value: 100
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F17 DC pump min freq
      address: 0x018A
      unit_of_measurement: "%"
      #icon: "mdi:fan-speed-1"
      id: f17_dc_pump_min_freq
      value_type: U_WORD
      min_value: 10
      max_value: 100
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F18 DC pump scale factor
      address: 0x018B
      #unit_of_measurement: "%"
      #icon: "mdi:fan-speed-1"
      id: f18_dc_pump_scale_factor
      value_type: U_WORD
      min_value: 1
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F19 DC pump diff
      address: 0x018C
      #unit_of_measurement: "%"
      #icon: "mdi:fan-speed-1"
      id: f19_dc_pump_diff
      value_type: U_WORD
      min_value: 0
      max_value: 100
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} G04 Delta pompy obiegowej
      address: 0x018D
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: g04_delta_temp_set
      value_type: U_WORD
      min_value: 5
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
####################################################
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F21 Comp freq scale factor
    #   address: 0x018E
    #   #unit_of_measurement: "%"
    #   #icon: "mdi:fan-speed-1"
    #   id: f21_comp_freq_scale_factor
    #   value_type: U_WORD
    #   min_value: 1
    #   max_value: 10
    #   #lambda: "return x * 0.5;"
    #   #write_lambda: "return x / 0.5;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F22 Comp freq diff
    #   address: 0x018F
    #   #unit_of_measurement: "%"
    #   #icon: "mdi:fan-speed-1"
    #   id: f22_comp_freq_diff
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 100
    #   #lambda: "return x * 0.5;"
    #   #write_lambda: "return x / 0.5;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} G10 Temperatura przełączenia grzanie/chłodzenie
      address: 0x0192
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: g10_ambtemp_switch_setp
      value_type: S_WORD
      min_value: -20
      max_value: 30
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} G11 Histereza przełączenia grzanie/chłodzenie
      address: 0x0193
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: g11_ambtemp_diff
      value_type: U_WORD
      min_value: 1
      max_value: 10
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F27 Limit freq temp diff
      address: 0x0194
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f27_limit_freq_temp_diff
      value_type: U_WORD
      min_value: 5
      max_value: 20
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F28 Dec freq temp diff
      address: 0x0195
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f28_dec_freq_temp_diff
      value_type: U_WORD
      min_value: 5
      max_value: 20
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F29 Limit freq outlet low
      address: 0x0196
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f29_limit_freq_outlet_low
      value_type: U_WORD
      min_value: 0
      max_value: 20
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F30 Dec freq outlet low
      address: 0x0197
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f30_dec_freq_outlet_low
      value_type: U_WORD
      min_value: 0
      max_value: 20
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F31 Limit freq outlet high
      address: 0x0198
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f31_limit_freq_outlet_high
      value_type: U_WORD
      min_value: 30
      max_value: 80
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F32 Dec freq outlet high
      address: 0x0199
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f32_dec_freq_outlet_low
      value_type: U_WORD
      min_value: 30
      max_value: 80
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa temp tryb antilegionella
      address: 0x019A
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: temp_setpoint_of_antilegionella
      value_type: U_WORD
      min_value: 30
      max_value: 70
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Start tryb antilegionella
      address: 0x019C
      unit_of_measurement: "hour"
      #icon: "mdi:fan-speed-1"
      id: start_timer_of_antilegionella
      value_type: U_WORD
      min_value: 0
      max_value: 23
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Stop tryb antilegionella
      address: 0x019D
      unit_of_measurement: "hour"
      #icon: "mdi:fan-speed-1"
      id: stop_timer_of_antilegionella
      value_type: U_WORD
      min_value: 0
      max_value: 23
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F35 Antifreeze cycle
      address: 0x019F
      unit_of_measurement: "min"
      #icon: "mdi:fan-speed-1"
      id: f35_antifreeze_cycle
      value_type: U_WORD
      min_value: 1
      max_value: 60
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F36 Three-way valve cycle
      address: 0x01A0
      unit_of_measurement: "hour"
      #icon: "mdi:fan-speed-1"
      id: f36_threeway_valve_cycle
      value_type: U_WORD
      min_value: 1
      max_value: 60
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F37 Pump cycle in error
      address: 0x01A1
      unit_of_measurement: "min"
      #icon: "mdi:fan-speed-1"
      id: f37_pump_cycle_in_error
      value_type: U_WORD
      min_value: 1
      max_value: 120
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F38 Comp freq cycle
      address: 0x01A2
      unit_of_measurement: "s"
      #icon: "mdi:fan-speed-1"
      id: f38_comp_freq_cycle
      value_type: U_WORD
      min_value: 20
      max_value: 60
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} F41 Air too low stp.
      address: 0x01A3
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: f41_air_too_low_stp
      value_type: S_WORD
      min_value: -40
      max_value: 0
      #lambda: "return x * 0.5;"
      #write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
 
#######################################################
#############   Nastawy Timeband
#### Timeband 1
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa CWU Timeband 1
      address: 0x01A4
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: hotwater_set_temp_of_timeband_1
      value_type: U_WORD
      min_value: 28
      max_value: 60
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa CO Timeband 1
      address: 0x01A5
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: heat_setpoint_of_timeband_1
      value_type: U_WORD
      min_value: 15
      max_value: 50
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa chłodzenie Timeband 1
      address: 0x01A6
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: cool_setpoint_of_timeband_1
      value_type: U_WORD
      min_value: 7
      max_value: 30
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
####Timeband 2
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa CWU Timeband 2
      address: 0x01A7
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: hotwater_set_temp_of_timeband_2
      value_type: U_WORD
      min_value: 28
      max_value: 60
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa CO Timeband 2
      address: 0x01A8
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: heat_setpoint_of_timeband_2
      value_type: U_WORD
      min_value: 15
      max_value: 50
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa chłodzenie Timeband 2
      address: 0x01A9
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: cool_setpoint_of_timeband_2
      value_type: U_WORD
      min_value: 7
      max_value: 30
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
####Timeband 3
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa CWU Timeband 3
      address: 0x01AA
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: hotwater_set_temp_of_timeband_3
      value_type: U_WORD
      min_value: 28
      max_value: 60
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa CO Timeband 3
      address: 0x01AB
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: heat_setpoint_of_timeband_3
      value_type: U_WORD
      min_value: 15
      max_value: 50
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
      #（Read only lower 8 bits）
      bitmask: 0x00FF
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} Nastawa chłodzenie Timeband 3
      address: 0x01AC
      unit_of_measurement: "°C"
      #icon: "mdi:fan-speed-1"
      id: cool_setpoint_of_timeband_3
      value_type: U_WORD
      min_value: 7
      max_value: 30
      lambda: "return x * 0.5;"
      write_lambda: "return x / 0.5;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
########################################################
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} H17 Def fan high press
    #   address: 0x01B0
    #   unit_of_measurement: "bar"
    #   #icon: "mdi:fan-speed-1"
    #   id: h17_def_fan_high_press
    #   value_type: U_WORD
    #   min_value: 20
    #   max_value: 40
    #   #lambda: "return x * 0.5;"
    #   #write_lambda: "return x / 0.5;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} H18 Def fan speed
    #   address: 0x01B1
    #   unit_of_measurement: "rpm"
    #   #icon: "mdi:fan-speed-1"
    #   id: h18_def_fan_speed
    #   value_type: U_WORD
    #   min_value: 20
    #   max_value: 100
    #   lambda: "return x / 10.0;"
    #   write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F47 High press adjust
    #   address: 0x01B2
    #   unit_of_measurement: "bar"
    #   #icon: "mdi:fan-speed-1"
    #   id: f47_high_press_adjust
    #   value_type: S_WORD
    #   min_value: -50
    #   max_value: 50
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F48 Low press adjust
    #   address: 0x01B3
    #   unit_of_measurement: "bar"
    #   #icon: "mdi:fan-speed-1"
    #   id: f48_low_press_adjust
    #   value_type: S_WORD
    #   min_value: -50
    #   max_value: 50
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F51 Air too low diff
    #   address: 0x01B4
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: f51_air_too_low_diff
    #   value_type: U_WORD
    #   min_value: 1
    #   max_value: 10
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} B93 AV init outlet stp
    #   address: 0x01B5
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: b93_av_init_outlet_stp
    #   value_type: U_WORD
    #   min_value: 20
    #   max_value: 60
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F53 Outlet temp offset stp
    #   address: 0x01B6
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: f53_outlet_temp_offset_stp
    #   value_type: U_WORD
    #   min_value: 30
    #   max_value: 55
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F52 Outlet temp offset stp
    #   address: 0x01B7
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: f52_outlet_temp_offset_stp
    #   value_type: U_WORD
    #   min_value: 0
    #   max_value: 50
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F54 Heat upper limit stp
    #   address: 0x01B8
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: f54_heat_upper_limit_stp
    #   value_type: U_WORD
    #   min_value: 10
    #   max_value: 80
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    # - platform: modbus_controller
    #   modbus_controller_id: sprsun_pc
    #   name: ${friendly_name} F55 Cool lower limit stp
    #   address: 0x01B9
    #   unit_of_measurement: "°C"
    #   #icon: "mdi:fan-speed-1"
    #   id: f55_cool_lower_limit_stp
    #   value_type: U_WORD
    #   min_value: 7
    #   max_value: 30
    #   #lambda: "return x / 10.0;"
    #   #write_lambda: "return x * 10.0;"
    #   step: 1
    #   mode: box
    #   entity_category: config
    #   skip_updates: 10
 
    - platform: modbus_controller
      modbus_controller_id: sprsun_pc
      name: ${friendly_name} R94 Oil return freq.
      address: 0x01BB
      unit_of_measurement: "Hz"
      #icon: "mdi:fan-speed-1"
      id: r94_oil_return_freq
      value_type: U_WORD
      min_value: 10
      max_value: 70
      #lambda: "return x / 10.0;"
      #write_lambda: "return x * 10.0;"
      step: 1
      mode: box
      entity_category: config
      skip_updates: 10
