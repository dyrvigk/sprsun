external_components:
  - source: github://dyrvigk/sprsun@main
    refresh: 0s



nilan:

sensor:
 
 
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Inlet Temp
    id: inlet_temp
    register_type: holding
    address: 188
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} HotWater Temp
    id: hotwater_temp
    register_type: holding
    address: 195
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Udendørs Temp
    id: ambi_temp
    register_type: holding
    address: 190
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Outlet Temp
    id: outlet_temp
    register_type: holding
    address: 0x0012
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2
 
 

  

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Suction Gas Temp
    id: suct_gas_temp
    register_type: holding
    address: 191
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Coil Temp
    id: coil_temp
    register_type: holding
    address: 196
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2
    
    
  
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Fan 1
    id: dc_fan_1_speed
    register_type: holding
    address: 199
    unit_of_measurement: "RPM"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Fan 2
    id: dc_fan_2_speed
    register_type: holding
    address: 201
    unit_of_measurement: "RPM"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Evaporator Temp
    id: evap_temp
    register_type: holding
    address: 206
    unit_of_measurement: "°C"
    device_class: "temperature"
    value_type: S_WORD
    filters:
      - lambda: return x * 0.1;
    accuracy_decimals: 2
  
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Suction Pressure
    id: suct_press
    register_type: holding
    address: 194
    unit_of_measurement: "bar"
    device_class: "pressure"
    value_type: U_WORD
    filters:
      - multiply: 0.01
    accuracy_decimals: 1

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Discharge Pressure
    id: disch_press
    register_type: holding
    address: 193
    unit_of_measurement: "bar"
    device_class: "pressure"
    value_type: U_WORD
    filters:
      - multiply: 0.01
    accuracy_decimals: 1

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Fan output
    id: fan_output
    register_type: holding
    address: 197
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Pump output
    id: pump_output
    register_type: holding
    address: 198
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1  

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Required cap
    id: required_capasity
    register_type: holding
    address: 203
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1  

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Actual cap
    id: actual_capasity
    register_type: holding
    address: 204
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1  

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Actual speed
    id: actual_speed
    register_type: holding
    address: 205
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1    
    

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Electronic expansion valve opening
    id: eev_opening
    register_type: holding
    address: 207
    value_type: U_WORD
    filters:
      - multiply: 1.0
    accuracy_decimals: 1  

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Suction SH
    id: sprsun_suction_sh
    register_type: holding
    address: 211
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1   

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Unit COP
    id: sprsun_unit_cop
    register_type: holding
    address: 389
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1   
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Power
    id: sprsun_bldc_power
    register_type: holding
    address: 333
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1    

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Power Fase A Voltage
    id: sprsun_fase_a_voltage
    register_type: holding
    address: 376
    value_type: U_WORD
    filters:
      - multiply: 0.1
    accuracy_decimals: 1    

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Pobór
    id: power_w
    register_type: holding
    address: 0x0017
    unit_of_measurement: "W"
    device_class: "power"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 2  

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Controller Version
    id: controller_version
    register_type: holding
    address: 0x002C
    #unit_of_measurement: "Hz"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 0
    skip_updates: 10

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Display Version
    id: display_version
    register_type: holding
    address: 0x002D
    #unit_of_measurement: "Hz"
    #device_class: "frequency"
    value_type: U_WORD
    filters:
      - lambda: return x * 1.0;
    accuracy_decimals: 0
    skip_updates: 10  

  
    
text_sensor:  
    
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: "Protection"
    id: sprsun_protection
    register_type: holding
    address: 210
    lambda: !lambda |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0: mode_str = "No"; break;
        case 1: mode_str = "No"; break;
        case 2: mode_str = "LowSH"; break;
        case 3: mode_str = "Lop"; break;
        case 4: mode_str = "Mop"; break;
        case 5: mode_str = "HITcond"; break;
      }
      return mode_str;

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: "Current status of the unit"
    id: sprsun_current_status
    register_type: holding
    address: 215
    lambda: !lambda |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0: mode_str = "Cooling"; break;
        case 1: mode_str = "Heating"; break;
        case 2: mode_str = "HotWater"; break;
      }
      return mode_str;

 

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Failure symbol 1
    id: failure_symbol_1
    register_type: read
    address: 13
    response_size: 60
    raw_encode: NONE
    #bitmask: 0
    lambda: |-
       std::string z = "";
       int idx = item->offset+1;
       if ((data[idx] & 13) != 0) z += "Too many mem writings, ";
       if ((data[idx] & 14) != 0) z += "Retain mem write error, ";
       if ((data[idx] & 15) != 0) z += "Inlet probe error, ";
       if ((data[idx] & 16) != 0) z += "Outlet probe error, ";
       if ((data[idx] & 17) != 0) z += "Ambient probe error, ";
       if ((data[idx] & 18) != 0) z += "Condenser coil temp, ";
       if ((data[idx] & 19) != 0) z += "Water flow switch, ";
       if ((data[idx] & 20) != 0) z += "Phase sequ.prot.alarm, ";
       if ((data[idx] & 21) != 0) z += "Unit work hour warning, ";
       if ((data[idx] & 22) != 0) z += "Pump work hour warning, ";
       if ((data[idx] & 23) != 0) z += "Comp.work hour warning, ";
       if ((data[idx] & 24) != 0) z += "Cond.fan work hourWarn, ";
       if ((data[idx] & 25) != 0) z += "Low superheat - Vlv.A, ";
       if ((data[idx] & 26) != 0) z += "Low superheat - Vlv.B, ";
       if ((data[idx] & 27) != 0) z += "LOP - Vlv.A, ";
       if ((data[idx] & 28) != 0) z += "LOP - Vlv.B, ";
       if ((data[idx] & 29) != 0) z += "MOP - Vlv.A, ";
       if ((data[idx] & 30) != 0) z += "MOP - Vlv.B, ";
       if ((data[idx] & 31) != 0) z += "Motor error - Vlv.A, ";
       if ((data[idx] & 32) != 0) z += "Motor error - Vlv.B, ";
       if ((data[idx] & 33) != 0) z += "Low suct.temp. - Vlv.A, ";
       if ((data[idx] & 34) != 0) z += "Low suct.temp. - Vlv.B, ";
       if ((data[idx] & 35) != 0) z += "High condens.temp.EVD, ";
       if ((data[idx] & 36) != 0) z += "Probe S1 error EVD, ";
       if ((data[idx] & 37) != 0) z += "Probe S2 error EVD, ";
       if ((data[idx] & 38) != 0) z += "Probe S3 error EVD, ";
       if ((data[idx] & 39) != 0) z += "Probe S4 error EVD, ";
       if ((data[idx] & 40) != 0) z += "Battery discharge EVD, ";
       if ((data[idx] & 41) != 0) z += "EEPROM alarm EVD, ";
       if ((data[idx] & 42) != 0) z += "Incomplete closing EVD, ";
       if ((data[idx] & 43) != 0) z += "Emergency closing EVD, ";
       if ((data[idx] & 44) != 0) z += "FW not compatible EVD, ";
       if ((data[idx] & 45) != 0) z += "Config. error EVD, ";
       if ((data[idx] & 46) != 0) z += "EVD Driver offline, ";
       if ((data[idx] & 47) != 0) z += "BLDC-alarm:High startup DeltaP, ";
       if ((data[idx] & 48) != 0) z += "BLDC-alarm:Compressor shut off, ";
       if ((data[idx] & 49) != 0) z += "BLDC-alarm:Out of Envelope, ";
       if ((data[idx] & 50) != 0) z += "BLDC-alarm:Starting fail wait, ";
       if ((data[idx] & 51) != 0) z += "BLDC-alarm:Starting fail exceeded, ";
       if ((data[idx] & 52) != 0) z += "BLDC-alarm:Low delta pressure, ";
       if ((data[idx] & 53) != 0) z += "BLDC-alarm:High discarge gas temp, ";
       if ((data[idx] & 54) != 0) z += "Envelope-alarm:High compressor ratio, ";
       if ((data[idx] & 55) != 0) z += "Envelope-alarm:High discharge press., ";
       if ((data[idx] & 56) != 0) z += "Envelope-alarm:High current, ";
       if ((data[idx] & 57) != 0) z += "Envelope-alarm:High suction pressure, ";
       if ((data[idx] & 58) != 0) z += "Envelope-alarm:Low compressor ratio, ";
       if ((data[idx] & 59) != 0) z += "Envelope-alarm:Low pressure diff., ";
       if ((data[idx] & 60) != 0) z += "Envelope-alarm:Low discharge pressure, ";
       if ((data[idx] & 61) != 0) z += "Envelope-alarm:Low suction pressure, ";
       if ((data[idx] & 62) != 0) z += "Envelope-alarm:High discharge temp., ";
       if ((data[idx] & 63) != 0) z += "Power+ alarm:01-Overcurrent, ";
       if ((data[idx] & 64) != 0) z += "Power+ alarm:02-Motor overload, ";
       if ((data[idx] & 65) != 0) z += "Power+ alarm:03-DCbus overvoltage, ";
       if ((data[idx] & 66) != 0) z += "Power+ alarm:04-DCbus undervoltage, ";
       if ((data[idx] & 67) != 0) z += "Power+ alarm:05-Drive overtemp., ";
       if ((data[idx] & 68) != 0) z += "Power+ alarm:06-Drive undertemp., ";
       if ((data[idx] & 69) != 0) z += "Power+ alarm:07-Overcurrent HW, ";
       if ((data[idx] & 70) != 0) z += "Power+ alarm:08-Motor overtemp., ";
       if ((data[idx] & 71) != 0) z += "Power+ alarm:09-IGBT module error, ";
       if ((data[idx] & 72) != 0) z += "Power+ alarm:10-CPU error, ";
       if ((data[idx] & 73) != 0) z += "Power+ alarm:11-Parameter default, ";
       
       if(z.length() > 0){
         z.pop_back();
       }
       return {z};   
      
select:
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Work Mode
    #icon: "mdi:fan"
    id: p06_unit_mode
    address: 000
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 6
    optionsmap:
      "Cooling": 0
      "Heating": 1
      "HotWater": 2
      "HotWater + Cooling": 3
      "HotWater + Heating": 4

  

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} F56 Model pompy ciepła
    #icon: "mdi:fan"
    id: f56_model_selection
    address:  0x01BA
    entity_category: config
    value_type: U_WORD
    optimistic: false
    skip_updates: 10
    optionsmap:
      "A102508 - CGK025V3L-B 9.5 kW 220V": 1
      "A202508 - CGK-025V3L-B 9.5 kW 380V": 2
      "A103008 - CGK030V3L-B 12 kW 220V": 3
      "A203008 - CGK-030V3L-B 12 kW 380V": 4
      "A104008 - CGK040V3L-B 15 kW 220V": 5
      "A204008 - CGK-040V3L-B 15 kW 380V": 6
      "A105008 - CGK050V3L-B 20 kW 220V": 7
      "A205008 - CGK-050V3L-B 20 kW 380V": 8
      "A106008 - CGK060V3L-B 22 kW 220V": 9
      "A206008 - CGK-060V3L-B 22 kW 380V": 10




number: 

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} hotwater_setpoint
    address: 003
    unit_of_measurement: "°C"
    #icon: "mdi:fan-speed-1"
    id: p04_hotwater_setpoint
    value_type: U_WORD
    min_value: 10
    max_value: 55
    lambda: "return x * 0.1;"
    write_lambda: "return x / 0.1;"
    step: 1
    mode: slider
    entity_category: config
    skip_updates: 6

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} heating_setpoint
    address: 001
    unit_of_measurement: "°C"
    #icon: "mdi:fan-speed-1"
    id: p04_heating_setpoint
    value_type: U_WORD
    min_value: 10
    max_value: 55
    lambda: "return x * 0.1;"
    write_lambda: "return x / 0.1;"
    step: 1
    mode: slider
    entity_category: config
    skip_updates: 6

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} cooling_setpoint
    address: 002
    unit_of_measurement: "°C"
    #icon: "mdi:fan-speed-1"
    id: p04_cooling_setpoint
    value_type: U_WORD
    min_value: 10
    max_value: 55
    lambda: "return x * 0.1;"
    write_lambda: "return x / 0.1;"
    step: 1
    mode: slider
    entity_category: config
    skip_updates: 6  

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: ${friendly_name} Hot water hysteresis
    address: 004
    unit_of_measurement: "°C"
    #icon: "mdi:fan-speed-1"
    id: hotwater_start_diff
    value_type: U_WORD
    min_value: 1
    max_value: 15
    lambda: "return x * 0.1;"
    write_lambda: "return x / 0.1;"
    step: 1
    mode: slider
    entity_category: config
    skip_updates: 6  

  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    name: "Fan mode set"
    id: sprsun_fan_mode_set
    min_value: 0
    max_value: 3
    step: 1.0
    address: 12
    force_new_range: true
    use_write_multiple: true

switch:
  - platform: modbus_controller
    modbus_controller_id: sprsun_pc
    id: enable_eletric_meter
    register_type: coil
    address: 67
    name: "enable eletric meter"
    bitmask: 1
    

climate:
  - platform: nilan
    name: Nilan
    current_temp_sensor_id: hotwater_temp
    target_temp_sensor_id: p04_hotwater_setpoint
    fan_speed_sensor_id: sprsun_fan_mode_set
    mode_select_id: p06_unit_mode
 
  
